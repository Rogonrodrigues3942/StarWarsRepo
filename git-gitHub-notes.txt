Git e GitHub Doc



Repositório: coleção de pastas e arquivos de um projeto.

----------------------------------------------------------
Como GitHub funciona: GitHub hospeda repositórios do Git e fornece aos desenvolvedores ferramentas para enviar um código melhor por meio das funcionalidades de linha de comando, problemas(discussões encadeadas), pull requests, revisão de código ou o uso de uma coleção de aplicativos grátis e para compra em GitHub Marketplace.


----------------------------------------------------------

GitHub e a linha de comando

Exemplos:

# baixar um repositório no GitHub para nossa máquina
# Substituir `owner/repo` pelo proprietário e nome do repositório a ser clonado

Comando: git clone https://github.com/owner/repo.git

Meu repositório:
git clone https://github.com/Rogonrodrigues3942/StarWarsRepo.git


----------------------------------------------------------
21/03/2025 - DOJO GitHub - aplicado dia 06/fev

****

A - Comandos apresdentados no DOJO

1 - git clone url;

2 - git init;

3 - git branch;

4 - git checkout < nome da branch>;

5 - git status;

6 - git add <arquivo>

7 - git commit -m "digite o comentário";

8 - git push <remoto> <branch>;

9 - git merge <branch>;


****

B - Passo a Passo

1º - Crie o repositório no GitHub;

2º - Sincronize o repositório criado no GitHub com o diretório do seu equipamento:

c:/repositorio> git clone <repositório> 


3º - 

4º

5º


Digitei o comandogit git push origin HEAD e retornou: 

To https://github.com/Rogonrodrigues3942/teste.git
 ! [rejected]        HEAD -> master (non-fast-forward)
error: failed to push some refs to 'https://github.com/Rogonrodrigues3942/teste.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. If you want to integrate the remote changes,
hint: use 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
Me explique o retorno e como corrijo isso e carrego os arquivos novos no diretório git?

https://github.com/Rogonrodrigues3942/teste

----------------------------------------------------------
*** Curso: Git e GitHub para iniciantes ***

Seção 3 -  Essencial do Git

24/03/2025 - Aula 07 - Inicializando um repositório

1º - Crie o repositório do projeto:

mkdir git-course


2º - Acessando o diretório

cd git-course


3º - No diretório "git-course" inicializar o Git

git init


4º - Após a inicialização do Git acesse a pasta .git/

I - ls -la

II - cd .git/



5º - Após acessar a pasta .git/

I - ls -la

Mostrará todos os elementos que compõem o git

./  

../  

COMMIT_EDITMSG  

HEAD  

config  

description  

hooks/  

index  

info/  

logs/  

objects/  

refs/


----------------------------------------------------------
24/03/2025 - Aula 08 - Usando o editor do terminal

1 - Acessar o "Vim" acessar o editor de texto "Linux"

vim "nome do arquivo"

2 - Para ativar o modo inserção digite 'i'

Habilita a edição do texto.

3 - Para salvar o arquivo aperte a tecla "ESC":

I - aperte a tecla ":";

II - Para salvar as modificações aperte a tecla "w";

III - Para sair aperte a tecla "q";

IV - Aperte a tecla "ENTER"


Dessa forma após realizar as ações o texto estará salvo e sairá da aplicação do texto.



----------------------------------------------------------
24/03/2025 - Aula 09 - O ciclo de vida dos status de seus arquivos


Há 6 status do arquivos:

I - untracked (Não Modificado)

II - Tracked (Rastreado)

III - unmodified (Não Modificado)

IV - modified (Modificado)

V - staged (Preparado para Commit)

VI - Committed (Commitado)


Descrição dos status:

I - untracked (Não Modificado): o arquivo já faz parte do controle de versão do Git;

II - Tracked (Rastreado): o arquivo já faz parte do controle de versão do Git;

III - unmodified (Não Modificado): o arquivo está rastreado e não sofreu alterações desde o último commit. O Git não tem nada para registrar sobre ele;

IV - modified (Modificado): O arquivo foi editado, mas as mudanças ainda não foram preparadas (staged) para o commit;

V - staged (Preparado para Commit): O arquivo foi modificado e adicionado ao "stage" usando git add, ou seja, está pronto para ser commitado;

VI - Committed (Commitado): as mudanças foram salvas no histórico do repositório. O arquivo está na mesma versão do último commit.


Resumo do ciclo de status:

1️⃣ Untracked ➝ git add ➝ 2️⃣ Tracked (Staged) ➝ git commit ➝ 3️⃣ Committed
4️⃣ Se um arquivo for modificado depois de commitado, ele volta para Modified.


***
Explicação curso:

Untracked: arquivo adicionado ao repositório e não visualizado pelo git. Não conhece o repositório remoto (Git);

Unmodified: arquivo adicionado ao repositório remoto, 

Modified: arquivo modificado 

Staged: O arquivo foi modificado e adicionado ao "stage"


path file: C:/Users/rogon/git-course


Aplicação:

1- Verifique a situação do git:

$ git status


2 - Criar arquivo "Readme.md":

$ vim Readme.md


3 - Após a criação do arquivo "Readme.md":

I - Digite "i" para inserir strings (texto = contéudo);

II - Após a inserção de dados no arquivo "Readme.md"; aperte a teccla "ESC", habilitará as funções para salvar , apertando a tecla "w" e sair do editor de texto 'vim' apertando a tecla "q".


4 - Verifique novamente a situação do git após a inserção de arquivos e/ou mudanças: 

$ git status


5 - Realize a adição do arquivo ao git:

$ git add Readme.md



6 - Verifique novamente a situação do arquivo após ser adicionado (git add) ao git:

$ git status


7 - O arquivo está preparado para ser comentado ( commit ) no git:

$ git commit -m "Inserindo arquivo atualizado no GitHub - xx/xx/xxxx."

retorno do comando "git commit"

rogon@Evolution1000 MINGW64 ~/git-course (master)
$ git commit -m "Adicionando arquivo Readme em 24/03/2025."
[master c7c2721] Adicionando arquivo Readme em 24/03/2025.
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename Read.md => Readme.md (100%)


8 - Verifique novamente a situação do arquivo após ser comentado (commit):

$ git status

retorno do comando "git status"

rogon@Evolution1000 MINGW64 ~/git-course (master)
$ git status
On branch master
nothing to commit, working tree clean


1º - criar/modificado o arquivo
2º - verificar o status (git status)
3º - Adicionar o arquivo (git add . ou git add nome-arquivo.extensão)
4º - Realizar comentário do arquivo (git commit -m "mensagem")
5º - verificar o status novamente (git status)


----------------------------------------------------------
24/03/2025 - Aula 10 - Visualizando logs

1 - Digite o comando para trazer todos os logs do git:

$ git log

- retorna:

commit c7c2721ce3b30d8333ab42ef28685da4fce544a9 (HEAD -> master) *** contém a hash do commit ('c7c2721ce3b30d8333ab42ef28685da4fce544a9')
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>		 *** autor do comentário	
Date:   Mon Mar 24 11:31:03 2025 -0300				 *** data do comentário

    Adicionando arquivo Readme em 24/03/2025.			*** mensagem ao usuário



2 - Opção "decorate":

$ git log --decorate


- retorna:

commit c7c2721ce3b30d8333ab42ef28685da4fce544a9 (HEAD -> master)
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
Date:   Mon Mar 24 11:31:03 2025 -0300

    Adicionando arquivo Readme em 24/03/2025.



3 - Filtrando log pelo autor:

$ git log --author="Rogonrodrigues3942"

ou

$ git log --author="Rogonro"


- retorna:

$ git log --author="Rogonro"
commit c7c2721ce3b30d8333ab42ef28685da4fce544a9 (HEAD -> master)
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
Date:   Mon Mar 24 11:31:03 2025 -0300

    Adicionando arquivo Readme em 24/03/2025.

commit f2f7bd926974ac16887a40769ea7af79666e6f5b
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
Date:   Sun Mar 23 18:36:17 2025 -0300

    Arquivo atualizado  novamente.

commit 65b6003cdd4ec9685b4ee87a827787d3e1679ea0
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
Date:   Sun Mar 23 18:14:48 2025 -0300

    Feita nova alteração.

commit 816a5b5a0db0c2e2835c58bade5ed9297452ce7d
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
Date:   Sun Mar 23 18:08:35 2025 -0300

    Add Read-md.


4 - O autor não existe não há retorno.


5 - Opção "shortlog"

$ git shortlog

Retorna:

Rogonrodrigues3942 (4):					*** autor e quantidade de commits
      Add Read-md.
      Feita nova alteração.				*** quais as ações realizadas (mensagens inseridas no commit)
      Arquivo atualizado  novamente.
      Adicionando arquivo Readme em 24/03/2025.


6 - Opção "graph":

$ git log --graph

retorna:

* commit c7c2721ce3b30d8333ab42ef28685da4fce544a9 (HEAD -> master)
| Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
| Date:   Mon Mar 24 11:31:03 2025 -0300
|
|     Adicionando arquivo Readme em 24/03/2025.
|
* commit f2f7bd926974ac16887a40769ea7af79666e6f5b
| Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
| Date:   Sun Mar 23 18:36:17 2025 -0300
|
|     Arquivo atualizado  novamente.
|
* commit 65b6003cdd4ec9685b4ee87a827787d3e1679ea0
| Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
| Date:   Sun Mar 23 18:14:48 2025 -0300
|
|     Feita nova alteração.
|
* commit 816a5b5a0db0c2e2835c58bade5ed9297452ce7d
  Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
  Date:   Sun Mar 23 18:08:35 2025 -0300

      Add Read-md.



7 - Opção show

Mostra as mudanças entre a versões atual e anterior.

$ git show c7c2721ce3b30d8333ab42ef28685da4fce544a9

retorna:

commit f2f7bd926974ac16887a40769ea7af79666e6f5b
Author: Rogonrodrigues3942 <rogonrodrigues@gmail.com>
Date:   Sun Mar 23 18:36:17 2025 -0300

    Arquivo atualizado  novamente.

diff --git a/Read.md b/Read.md
index b7b3e39..925fc93 100644
--- a/Read.md
+++ b/Read.md
@@ -1,4 +1,7 @@
 # GitHub

-Arquivo pda aula de Git e GitHub para iniciantes.
+Arquivo da aula de Git e GitHub para iniciantes.
+
 Arquivo modificado para testar inclusão.
+
+site: http://willianjusten.com.br



----------------------------------------------------------
24/03/2025 - Aula 11 - Visualizando o diff


Visualizar as mudanças antes de ocorrer. Utilizar o comando 'diff'.

Obs: acessar o diretório git-course, comando:

$ cd C:/Users/rogon/git-course

1 - git status: para verificar o status do git;

2 - vim Readme.md: realize mudanças no arquivo texto;

3 - Verifique a mudanças realizadas, digite o comando:

$ git diff

retorno:

warning: in the working copy of 'Readme.md', LF will be replaced by CRLF the next time Git touches it
diff --git a/Readme.md b/Readme.md
index 925fc93..c2b23a5 100644
--- a/Readme.md
+++ b/Readme.md
@@ -4,4 +4,6 @@ Arquivo da aula de Git e GitHub para iniciantes.

 Arquivo modificado para testar inclusão.

-site: http://willianjusten.com.br
+site: http://willianjusten.com.br
+
+Gostou do curso? Quer mais? Ajude com uma doação, até um café é válido =)  --> Mudança realizada.

Dica: usar sempre o git diff antes de realizar o commit.


I - Opção --name-only

Retorna apenas o nome do arquivo alterado. Digite o seguinte comando:

$ git diff --name-only

retorno:



----------------------------------------------------------
xx/xx/2025 - Aula 12 - Desfazendo coisas

Resetar arquivos modificados, corrigir erros.

1 - Para retornar a versão anterior e realizar a reversão da mudança digite: 

$ git checkout Readme-md.


2 - Para confirmar a mudança, digite:

$ git diff

Não retornará nenhuma informação.

3 - Acesse 0 arquivo Readme.md para confirmar a correção;


Atenção corrigindo o arquivo após a adição.

4 - Acesse o arquivo Readme.md e faça as alterações desejadas:

$ vim Readme.md


5 - Faça a adição do arquivo ao Git:

$ git add Readme.md


6 - Verifique a mudança do arquivo Readme.md:

$ git status


7 - Confirme  que não há mudança em cache para ser atualizada:

$ git diff


8 - Realize o retorno para versão anterior, digite;

$ git reset HEAD Readme.md

retorno:


9 - Verificando se a alteração foi removida:

$ git diff


10 - Remover todas as mudanças realizadas, limpando totalmente as alterações anteriores, retornando a versão inicial:

$ git checkout Readme.md


11 - Confirmando  se todas as alterações foram removidas:

$ git status


*** Comando "reset" - 3 opções: --soft, --mixed e --hard ***

O comando git reset é usado para desfazer mudanças no histórico do Git e podem afetar o histórico do Git e pode variar tanto o índice ( staging area ) quanto o diretório de trabalho. Dependendo da opção usada, ele pode apenas desfazer a marcação dos arquivos para commit, restaurar arquivos no diretório de trabalho ou até modificar o histórico de commits.


Sintaxe básica:

$ git reset [opções] [commit]

[opções]defina até onde as alterações serão desfeitas.

[commit]é o commit de referência para o que você quer voltar.


Modos de fazer o  "git reset"

O git reset pode ser usado em três modos principais:

1️⃣ git reset --soft (Mantém as alterações no staging)

$ cd C:/Users/rogon/git-course
----------------------------------------------------------

*** Seção 4: Repositórios Remotos ***

25/03/2025 - Aula 13 -  Criando um repositório no Github

----------------------------------------------------------
25/03/2025 - Aula 14 - Criando e Adicionando uma chave SSH 

1 - Acessar a chave ssh no repositório local:

$ cd ~/.ssh


2 - Digite o comando "git ls" para listar os arquivos do diretório "~/.ssh"

id_rsa  id_rsa.pub  known_hosts


3 - Acessar a chave SSH, digite o comando:

$ cat id_rsa.pub





----------------------------------------------------------
25/03/2025 - Aula 15 - Ligando repositório local a um remoto

1 - Conectando o repositório local  ao repositório remoto (GitHub).

git remote add origin git@github.com:Rogonrodrigues3942/git-course.git


2 - Confirmando a conexão com repositório remoto, digiteo comando:

$ git remote

retorno:

origin



*** git branch -M main

3 - Realizando o push para enivar todos arquivos, modificações e logs da sessão: 

$ git push -u origin main

----------------------------------------------------------
25/03/2025 - Aula 16 - Enviando mudanças para um repositório remoto

1 - Editar arquivo Readme.md

vim Readme.md


2 - Verificar o status do diretório local:

$ git status


3 - Realize o commit do diretório local:

$ git commit -am "Add change in Readme.md"


4 - Verificar o status do diretório local após o commit:

$ git status


5 - Enviar mudanças que estão em "staged":

$ git push origin master



----------------------------------------------------------
25/03/2025 - Aula 17 - Clonando repositórios remotos


*** rever

----------------------------------------------------------
25/03/2025 - Aula 18 - Fazendo fork de um projeto

*** rever

----------------------------------------------------------


*** Seção 5: Ramificação (Branch) ***


25/03/2025 - Aula 19 - O que é um branch e por que usar?

O que é um branch?

É um ponteiro móvel que leva a um commit.


Por que usar?

- Modificar arquivo sem mudar o local principal (master);

- Facilmente "desligável";

- Múltiplas pessoas trabalhando;

- Evita conflitos;


----------------------------------------------------------
25/03/2025 - Aula 20 - Criando um branch


1 - Criando um novo branch, digite o comando:

$ git checkout -b testing

retorno confirmando a criação:

Switched to a new branch 'testing'

2 - Digite o comando "git branch", mostra quais as branchs, a corrente é marcada com  asterisco.

$ git branch

retorno:

  master
* testing


----------------------------------------------------------
25/03/2025 - Aula 21 - Movendo e deletando branches

1 - Lista os branch, digite o comando:

$ git branch


2 - Para mudar de branch, digite o comando:

$ git checkout nome-da-branch


3 - Excluir branch, digite o comando:

$ git branch -D nome-do-branch


----------------------------------------------------------
25/03/2025 - Aula 22 - Entendo o merge


Há 

----------------------------------------------------------
26/03/2025 - Aula 23 - Entendo o Rebase

----------------------------------------------------------
26/03/2025 - Aula 24 - Merge e Rebase na prática

1 - Crie um novo diretório:

$ mkdir rebase-merge

$ cd rebase-merge


2- inicialize o git no diretório, digite o comando:

$ git init


3 - Crie um novo arquivo "foo"

$ vim foo


4 - Verifique o status o diretório, digite o comando:

$ git status


5 - Realize a adição para on "stage", digite o comando:

$ git add foo


6 - Realize o commit do arquivo foo, digite o comando:

$ git commit -m "Add foo"


7 - Crie uma um novo branch, digite o comando:

$ git checkout -b test


8 - Crie um arquivo chamado "bar", digite o comando:

$ vim foo


9 - Realize o add do arquivo "bar", digite o comando:

$ git add bar


10 - Realize o commit do arquivo "bar",  digite o comando:

$ git commit -m "Add bar."


11 - Verifique os logs das operações, digite o comando:

$ git log


12 - Mude para o branch "master", digite o comando:

$ git checkout master


13 - Crie um novo arquivo chamado "buzz", digite o comando:

$ vim fizz


14 -  Realize o add do arquivo "fizz", digite o comando:

$ git add fiz


15 - Realize o commit do arquivo "fizz",  digite o comando:

$ git commit -m "Add fizz."


16 - Realizando o merge para o branch "master", digite o comando:

$ git merge test


retorno:

Merge made by the 'ort' strategy.
 bar | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 bar


17 - Cheque os logs do repositório local, digite o comando:

$ git log



*** Método de união de branch "Rebase"

18 - Crie um novo arquivo chamando "buzz", digite o comando:

$ vim buzz


19 - Adicione o arquivo "buzz", digite o comando:

$ git add .


20 - Realize o comentário do arquivo "buzz", digite o comando:

$ git commit -m "Add buzz"


21 - Cheque os logs do repositório local, digite o comando:

$ git log


22 - Criar novo branck como "rebase-branch", digite o comando:

$ git checkout -b  rebase-branch


23 - Criar um novo arquivo texto chamado "bla", digite o comando:

$ vim bla


24 - Adicione o arquivo "bla", digite o comando:

$ git add .


25 - Realize o comentário do arquivo "bla", digite o comando:

$ git commit -m "Add bla"


26 - Visuaizei o git log graph, digite o comando:

$ git log --graph


27 - Mude para o branch "master", digite o comando:

$ git chekout master


28 - Cheque os logs do repositório local, digite o comando:

$ git log


29 - Adicione o arquivo "seila", digite o comando:

$ git add .


30 - Realize o comentário do arquivo "seila", digite o comando:

$ git commit -m "Add seila"


31 - Realize o união dos branchs com o método "rebase", digite o comando:

$ git rebase rebase-branch



Na Seção 5: Ramificação (Branch) apenas uma sugestão, faltou adicionar criação via terminal do repositório, para carregar o merge e rebase ao repositório remoto GitHub. Essa ação deveria ser inserida na aula 24.




----------------------------------------------------------

*** Seção 6: Extras ***


27/03/2025 - Aula 25 - Criando o .gitignore


O arquivo .gitignore é usado para dizer ao Git quais arquivos ou pastas ele deve ignorar e não versionar no repositório.


📌 Por que usar o .gitignore?

Alguns arquivos não precisam (ou não devem) ser enviados para o GitHub, como:

✅ Arquivos temporários do sistema (.DS_Store, thumbs.db).
✅ Pastas de dependências (node_modules/, vendor/).
✅ Arquivos de configuração pessoal (.env, config.json).
✅ Arquivos compilados (.class, .exe, .log).



1 - Criação do arquivo ".gitignore".

$ vim .gitignore


2 - No arquivo ".gitignore" digite as os arquivos ou extensões que são para serem ignoradas.


3 - Verifique o status do repositório local, digite o comando:

$ git status

retorna: os arquivos/extensões não mencionadas no arquivo .gitignore

----------------------------------------------------------
27/03/2025 - Aula 26 - Git stash é lindo

O comando git stash serve para guardar temporariamente as alterações feitas no código sem precisar fazer um commit.

📌 Quando usar?
Imagine que você está editando arquivos, mas precisa mudar de branch ou puxar atualizações do repositório. Com git stash, você pode salvar as alterações sem perder o que fez.

----------------------------------------------------------
xx/xx/2025 - Aula xx - 

----------------------------------------------------------
xx/xx/2025 - Aula xx - 

----------------------------------------------------------
xx/xx/2025 - Aula xx - 

----------------------------------------------------------
xx/xx/2025 - Aula xx - 

----------------------------------------------------------


Observações:


*** SSH KEY ***

…or create a new repository on the command line
(…ou crie um novo repositório na linha de comando)

echo "# rebase-merge" >> README.md

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:Rogonrodrigues3942/rebase-merge.git
git push -u origin main


…or push an existing repository from the command line
(…ou envie um repositório existente a partir da linha de comando)

git remote add origin git@github.com:Rogonrodrigues3942/rebase-merge.git
git branch -M main
git push -u origin main



*** HTTPS ***

…or create a new repository on the command line
(…ou crie um novo repositório na linha de comando)

echo "# rebase-merge" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Rogonrodrigues3942/rebase-merge.git
git push -u origin main


…or push an existing repository from the command line
(…ou envie um repositório existente a partir da linha de comando)

git remote add origin https://github.com/Rogonrodrigues3942/rebase-merge.git
git branch -M main
git push -u origin main



*** Create for CLI ***

repositório: cli-create-repository

git@github.com:Rogonrodrigues3942/cli-create-repository

Não cadastrei frase de segurança no momento  de cadastrar a chave SSH, tentei criar repositório no GitHub e pediu a passphrase e digitei e ocorreu erro fatal, foi negado a criação. Como resolvo erro mencionado a seguir:






