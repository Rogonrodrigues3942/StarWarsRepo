# Iniciado: 29/03/2025

Curso: Git e contribui√ß√µes para projetos Open Source

----------------------------------------------------------
*** Se√ß√£o 2 - B√°sico em Git ***

29/03/2025 - Aula 7 - Primeiros comandos Git

rever aula *****

----------------------------------------------------------
29/03/2025 - Aula 8 - Criando Reposit√≥rio no GitHub

git remote add origin https://github.com/Rogonrodrigues3942/StarWarsRepo.git

git branch -M principal 

git push -u origem principal


git remote add origin git@github.com:Rogonrodrigues3942/StarWarsRepo.git

git branch -M main
 
git push -u origem principal



----------------------------------------------------------
30/03/2025 - Aula 9 - Editando o Readme.md

rever *****

----------------------------------------------------------

30/03/2025 - Aula 10 - Revis√£o dos Comandos

1 - git add .

2 - git commit -m "message"

3 - git status

4 - git log

5 - git push


Git Workflow

Editando arquivo personagensS

----------------------------------------------------------

31/03/2025 - Aula 11 - Estado dos Arquivos no Git

untracked - monitorado;

modified - alterado;

staged - arquivos aguardando para serem comentados;

commited - arquivos comentados prontos para o push.


*** Diff ***

git diff HEAD~1

git pull

----------------------------------------------------------

31/01/2025 - Aula 12 - Exerc√≠cio de commit



xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

*** Se√ß√£o 03: Hist√≥ricos e conflitos

Mat√©ria: Conflitos e colabora√ß√£o.

01/04/2025 - Aula 13 - Comandos Clone e Pull


* git clone: baixa um reposit√≥rio com todo o seu conte√∫do.

√â uma maneira f√°cil de conex√£o com reposit√≥rio remoto.


* git pull 

baixa as altera√ß√µes do reposit√≥rio remoto, sincroniza as altera√ß√µes realizadas em uma branch.

Criado segundo reposit√≥rio e atualizado o primeiro reposit√≥rio.

----------------------------------------------------------
01/04/2025 - Aula 14 - Exerc√≠cios de colabora√ß√£o em reposit√≥rio

----------------------------------------------------------
03/04/2025 - Aula 15 - Navegando no hist√≥rico


1 - Retornar as vers√µes anteriores, acessando estados como arquivos e pastas do momento do determinado commit.

Digite o comando:

$ git checkout < commit >

Retorna o estado 'detached HEAD'. significa que saiu do topo da pilha dos commits. 

Esta a√ß√£o √© √∫til para detectar bugs para vers√µes de arquivos e pastas anteriores ao topo da pilha. 

** √â recomendado ao se resgatar vers√µes anteriores de arquivos e pastas, n√£o realizar commits no ponto resgatado e sim criar uma nova branch e realizar os commits, retornar a branch master e voltar ao topo da fila. 

2 - Reverter estado de branch, voltar ao topo da pilha de commits. Digite o comando:

$ git checkout master

*** realizar o exerc√≠cio depois. ***


----------------------------------------------------------

03/04/2025 - Aula 16 - Desfazendo com checkout

1 - Desfazendo mudan√ßas  que est√£o no topo da pilha de commits, deigite o comando:

$ git checkout -- path_do_arquivo

Exemplo:

$ git checkout -- personagens

Para checar a a√ß√£o de revers√£o de muda√ßas, digite o comando:

$ git status


2 - Desfazendo altera√ß√µes desde o 


----------------------------------------------------------

08/04/2025 - Aula 17 - Desfazendo com Revert e Reeset
<<<<<<< HEAD

$ git revert < n¬∫ do commit(total/parcial) >

Um novo commit que desfaz as altera√ß√µes do commit especificado.


$ git reset --hard < n¬∫ commit >

Reconfigura e remove todas as altera√ß√µes. Cuidado! Usar com bom senso.
=======
>>>>>>> 08534f410b33b38b0a08239da83c3b593e0c76f9

----------------------------------------------------------

08/04/2025 - Aula 18 - Conflitos


Qual o comando git para n√£o pedir passphrase

1¬∫ passo:

$ eval $(ssh-agent -s)  # Inicia o ssh-agent


2¬∫ passo:

ssh-add ~/.ssh/id_rsa  # Adiciona a chave privada ao agente



----------------------------------------------------------

09/04/2025 - Aula 19 - Exerc√≠cios de conflitos

Rever aula, interessante o assuntos.

----------------------------------------------------------

09/04/2025 - Aula 20 - Resolvendo conflitos com Merge

Rever aula, interessante o assuntos. Continua√ß√£o da aula 19.

----------------------------------------------------------

09/04/2025 - Aula 21 - Visualizando o hist√≥rico em uma Interface Gr√°fica

Utilizar a interface gr√°fica "Collab GitEye" 

Rever aula, interessante a interface gr√°fica. √ìtima para an√°lise de hist√≥ricos.

----------------------------------------------------------


*** Fim  da Se√ß√£o 3***

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

*** Se√ß√£o 4: Branching, Merge e Revase

24/04/2025 - Aula 22 - Branching

üü¢ Branch (ramo)

Um branch no Git √© como uma linha do tempo paralela do seu projeto.

Ele permite que voc√™ trabalhe em mudan√ßas sem afetar o c√≥digo principal (geralmente o master ou main).



‚û°Ô∏è Exemplo simples:

Imagine que o master √© a vers√£o do site que est√° no ar.

Voc√™ cria um branch chamado nova-funcionalidade para trabalhar numa melhoria sem quebrar o site atual.



üåø Branching (ramifica√ß√£o)

√â o ato de criar e usar branches.

Ou seja, quando voc√™ cria, muda ou mescla um branch, voc√™ est√° fazendo branching.


Conte√∫do:

1 - Comando "git branch", traz todos os branches criados no seu reposit√≥rio remoto,  o que est√° marcado com asterisco (*) √© o ramo corrente, sendo utilizado no momento de sua atualiza√ß√£o.

$ git branch
  main
  master
* nova-branch


2 -  Criando um novo branch, comando: git branch "nome-do-novo-branch"

Exemplo:

$ git branch novo-branch


3 - Deletando um  branch, comando: git branch -d "nome-do-branch"

Exemplo:

$ git branch -d novo-branch


4 - Trocando de  branch, comando: git checkout "nome-do-branch"

Exemplo:

$ git checkout novo-branch

ASSISTIDA: XX/XX/2025
EXERC√çCIO: XX/04/2025

---------------------------------------------------------
24/04/2025 - Aula 23 - Exerc√≠cio de Branchs

N√£o √© necess√°rio realizar push a cada commit realizado.

Tamb√©m √© recomend√°vel criar a nova branch no GitHub (reposit√≥rio remoto).




ASSISTIDA: 24/04/2025
EXERC√çCIO: 24/04/2025

----------------------------------------------------------

24/04/2025 - Aula 24 Git Merge e Exerc√≠cio


üß† Explica√ß√£o simples:
Imagine que voc√™ tem duas linhas de trabalho no seu projeto:

A branch principal: master ou main

Uma branch de desenvolvimento: nova-feature

Depois de fazer mudan√ßas e commits na nova-feature, voc√™ quer unir essas mudan√ßas com a branch principal.
√â a√≠ que entra o comando:


git merge nova-feature
Esse comando pega todas as mudan√ßas da branch nova-feature e traz para a branch atual (geralmente master ou main).

üß∞ Exemplo pr√°tico:
Voc√™ est√° na branch principal:

git checkout main
Faz o merge da feature:


git merge nova-feature
Pronto! Agora as mudan√ßas da nova-feature fazem parte da main.

üö® E se der conflito?
√Äs vezes, os arquivos mudaram nas duas branches e o Git n√£o sabe qual usar. Isso gera um conflito, e voc√™ precisa escolher manualmente o que fica.


*** Conte√∫do do curso:

1 - Estar no branch "master", digite o comando :

$ git merge nova-branch


2 - Resolva os conflitos no arquivo correspondente, de forma manual;


3 - Realize a adi√ß√£o:

$ git add . 


4 - Realize o coment√°rios:

$ git commit


5 - Realize o push para branch master

$ git push

ASSISTIDA: 24/04/2025
EXERC√çCIO: 24/04/2025


----------------------------------------------------------

25/04/2025 - Aula 25 - Git Release

O comando "git rebase" √© usado para reorganizar a hist√≥ria dos commits, como se fosse "recontar a hist√≥ria de outro jeito", deixando tudo mais limpo e linear.

O "git rebase" pega os commits de uma branch e coloca por cima da base de outra branch.


Diferen√ßa entre merge e rebase:

merge: junta os hist√≥ricos das branches e cria um commit de merge (comum em projetos colaborativos).

rebase: reaplica os commits um por um por cima da outra branch, criando um hist√≥rico mais limpo e linear.

ASSISTIDA: 25/04/2025
EXERC√çCIO: 25/04/2025
REVISTA: 26/04/2025

----------------------------------------------------------
25/04/2025 - Aula 26 - Exerc√≠cio de Rebase

Praticando:

1¬∫ - Criar uma nova branch

$ git checkout -b branch2


2¬∫ - Retornar para branch 'master':

$ git checkout master


3¬∫ - Adicionar novos personagens  no arquivo personagens


4¬∫ - Realize o adicionamento no GitHub

$ git add .


5¬∫ - Realize o coment√°rio

$ git commit


6¬∫ - Mude para a "branch2"

$ git checkout branch2




ASSISTIDA: 25/04/2025
EXERC√çCIO: 26/04/2025
----------------------------------------------------------

xx/xx/2025 - Aula 27 - Git Fetch


ASSISTIDA: XX/0X/2025
EXERC√çCIO: XX/0X/2025

----------------------------------------------------------

xx/xx/2025 - Aula 28 - Tags


ASSISTIDA: XX/0X/2025
EXERC√çCIO: XX/0X/2025

----------------------------------------------------------

*** Fim  da Se√ß√£o 4***

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

*** Se√ß√£o 5: Colabora√ß√£o com Open Source

xx/xx/2025 - Aula 

----------------------------------------------------------
xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

*** Se√ß√£o 6: Al√©m do B√°sico

xx/xx/2025 - Aula 

----------------------------------------------------------
xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------

xx/xx/2025 - Aula 

----------------------------------------------------------







